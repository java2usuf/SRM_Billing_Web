package com.mkyong.web.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mkyong.web.model.Transaction;

@Service
public class TransactionDaoImpl implements TransactionDao{
	
	@Autowired
	DataSource dataSource;

	@Override
	public void insert(Transaction txn) {
		String sql = "INSERT INTO TRANSACTION " +
				"(DISCOUNTPERCENTAGE, DISCOUNTEDAMOUNT, SUBTOTAL ,MOBILENUMBER,FinalAmount) VALUES (?, ?, ?, ?,?)";
		Connection conn = null;
		
		try {
			conn = dataSource.getConnection();
			int generatedkey=0;
			PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, txn.getDiscountPercentage());
			ps.setString(2, txn.getDiscountedAmount());
			ps.setString(3, txn.getSubTotal());
			ps.setString(4, txn.getMobileNumber());
			ps.setString(5, txn.getTotalAfterDiscount());
			ps.executeUpdate();
			
			
			ResultSet rs=ps.getGeneratedKeys();
		    while (rs.next()) {
		       generatedkey=rs.getInt(1);   
		               System.out.println("Auto Generated Primary Key " + generatedkey); 
		               txn.setAutoGeneratedId(generatedkey);
		    }
		    
		    
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
			
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
	}

	public String totalTxn() {
		
		String sql = "SELECT id,discountedAmount,subTotal,FinalAmount FROM TRANSACTION WHERE creation_time BETWEEN CURDATE()"+
						"AND DATE_ADD(CURDATE(), INTERVAL 1 day)";
		Connection conn = null;
		String resp = "";
		
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			
	        BigDecimal totalDis = new BigDecimal(0.0);
	        BigDecimal totalFinal = new BigDecimal(0.0);
	        BigDecimal totalSub = new BigDecimal(0.0);
			
		    while (rs.next()) {
		    	String discountedAmount = rs.getString("discountedAmount");
		    	String FinalAmount = rs.getString("FinalAmount");
		        String subTotal = rs.getString("subTotal");
		        
		        BigDecimal discountDouble = new BigDecimal(discountedAmount);
		        BigDecimal FinalDouble = new BigDecimal(FinalAmount);
		        BigDecimal subTotalDouble = new BigDecimal(subTotal);
		        
		        System.out.println("-- Txn Details -- ");
		        
		        System.out.println("TX no"+ rs.getString("id"));
		        System.out.println("-- Discount -- "+ discountDouble);
		        System.out.println("-- Final Amount -- "+ FinalDouble);
		        System.out.println("-- Sub Total -- "+ subTotalDouble);
		        
		        totalDis = totalDis.add(discountDouble);
		        totalFinal = totalFinal.add(FinalDouble);
		        totalSub = totalSub.add(subTotalDouble);
		    }
		    
		    resp = "</br> Total Sales (Before discount):    "+ totalSub +""
		    		+ "  </br> Total Discount :    "+ totalDis +""
		    				+ "  </br>  Total Amount (After Discount) :  <b> "+ totalFinal +"</b>";
		    
			ps.close();
		} catch (Exception e) {
			System.out.println("ERROR ");
			e.printStackTrace();
			throw new RuntimeException(e);
			
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
		return resp;
	}
	
	@Override
	public Transaction findByCustomerId(int txnId) {
		// TODO Auto-generated method stub
		return null;
	}

}
